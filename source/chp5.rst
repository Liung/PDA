.. _chp5index:

=================
chp5
=================



pandas数据结构入门
=========================

为了开始使用pandas，你需要熟悉它的两个重要的数据结构： *Series* 和 *DataFrame* 。虽然它们不是没一个问题的通用解决方案，但提供了一个坚实的，易于使用的大多数应用程序的基础。

Series
-----------

Series是一个一维的类似的数组对象，包含一个数组的数据（任何NumPy的数据类型）和一个与数组关联的数据标签，被叫做 *索引* 。最简单的Series是由一个数组的数据构成： ::

  P112

Seriers的交互式显示的字符窜表示形式是索引在左边，值在右边。因为我们没有给数据指定索引，一个包含整数0到 `N-1` （这里N是数据的长度）的默认索引被创建。 你可以分别的通过它的 `values` 和 `index` 属性来获取Series的数组表示和索引对象： ::

  P112

通常，需要创建一个带有索引来确定没一个数据点的Series： ::

  p112

与正规的NumPy数组相比，你可以使用索引里的值来选择一个单一值或一个值集： ::

  P113

NumPy数组操作，例如通过一个布尔数组过滤，纯量乘法，或使用数学函数，将会保持索引和值间的关联： ::

  P113


另一种思考的方式是，Series是一个定长的，有序的字典，因为它把索引和值映射起来了。它可以适用于许多期望一个字典的函数： ::

  P113

如果你有一些数据在一个Python字典中，你可以通过传递字典来从这些数据创建一个Series： ::

   P113

只传递一个字典的时候，结果Series中的索引将是排序后的字典的建。

  P114

在这种情况下， **sdata** 中的3个值被放在了合适的位置，但因为没有发现对应于 **'California'** 的值，就出现了 **NaN** （不是一个数），这在pandas中被用来标记数据缺失或 *NA* 值。我使用“missing”或“NA”来表示数度丢失。在pandas中用函数 **isnull** 和 **notnull** 来检测数据丢失： ::

  P114

Series也提供了这些函数的实例方法： ::

  P114

有关数据丢失的更详细的讨论将在本章的后面进行。

在许多应用中Series的一个重要功能是在算数用算中它会自动对齐不同索引的数据： ::

  P114

数据对齐被安排为一个独立的话题。

Series对象本身和它的索引都有一个 **name** 属性，它和pandas的其它一些关键功能整合在一起： ::

  P115

Series的索引可以通过赋值就地更改： ::

  P115

DataFrame
-----------------


